//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Data.Entity.Validation;
using System.Text;
using System;
using Domain.UnitOfWork;
using System.Collections.Generic;
using Infrastructure;
using Domain.CCHR.Entity;
using Domain.CCHR.Mapping;

namespace Domain.CCHR
{
    public partial class CCHRDBContextDBContext : DbContext, IQueryableUnitOfWork
    {
        private static readonly string DINGTALKSYNCCONNECTION = "CCHRConnectionString";
        static CCHRDBContextDBContext()
        {
            //Database.SetInitializer<ContextUnitOfWork>();
            System.Data.Entity.Database.SetInitializer<CCHRDBContextDBContext>(null);  
        }

        public static CCHRDBContextDBContext GetInstance()
        {

            return new CCHRDBContextDBContext();
        }
        public static CCHRDBContextDBContext GetInstance(string conn)
        {
            return new CCHRDBContextDBContext(conn);
        }
        public CCHRDBContextDBContext()
            : this(AppSettings.GetConection(DINGTALKSYNCCONNECTION))
        {
            this.Database.CommandTimeout = 500;
            //((IObjectContextAdapter)this).ObjectContext.ObjectMaterialized += new ObjectMaterializedEventHandler(ObjectMaterialized);
        }
        public CCHRDBContextDBContext(string conn)
            : base(conn)
        {
        }

        public DbSet<EmployeeContractApply> EmployeeContractApply { get; set; }

  


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new EmployeeContractApplyMap());
        }

        public void Commit()
        {
            try
            {
                SaveChanges();
            }
            catch (DbEntityValidationException validationErr)
            {
                if (validationErr.EntityValidationErrors == null || validationErr.EntityValidationErrors.Count() == 0) { throw validationErr; }
                var builder = new StringBuilder();
                foreach (var validationItem in validationErr.EntityValidationErrors)
                {
                    foreach (var errorItem in validationItem.ValidationErrors)
                    {
                        builder.AppendFormat("{0}{1}", errorItem.PropertyName, errorItem.ErrorMessage);
                    }
                }
                throw new Exception(builder.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CommitAndRefreshChanges()
        {
            bool saveFailed = false;

            do
            {
                try
                {
                    base.SaveChanges();

                    saveFailed = false;

                }
                catch (DbUpdateConcurrencyException ex)
                {
                    saveFailed = true;

                    ex.Entries.ToList()
                              .ForEach(entry =>
                              {
                                  entry.OriginalValues.SetValues(entry.GetDatabaseValues());
                              });

                }
            } while (saveFailed);

        }

        public void RollbackChanges()
        {
            base.ChangeTracker.Entries()
                              .ToList()
                              .ForEach(entry => entry.State = EntityState.Unchanged);
        }


        public DbSet<TEntity> CreateSet<TEntity>() where TEntity : class
        {

            return base.Set<TEntity>();
        }

        public void Decrypted<TEntity>(TEntity item) where TEntity : class
        {
            var decryptedProperties = item.GetType().GetProperties()
                .Where(p => p.GetCustomAttributes(typeof(Attribute), true).Any());
            foreach (var property in decryptedProperties)
            {
                var decryptedValue = property.GetValue(item);
                if (decryptedValue != null)
                {
                    this.Entry(item).Property(property.Name).OriginalValue = decryptedValue;
                    this.Entry(item).Property(property.Name).IsModified = false;
                }

            }

        }

        public TEntity Update<TEntity>(TEntity item) where TEntity : class
        {
            Attach(item);
            foreach (System.Reflection.PropertyInfo p in item.GetType().GetProperties())
            {
                if (p.GetValue(item) != null)
                {
                    this.Entry<TEntity>(item).Property(p.Name).IsModified = true;
                }
            }
            this.SaveChanges();
            return item;
        }

        public void Attach<TEntity>(TEntity item) where TEntity : class
        {
            base.Entry<TEntity>(item).State = EntityState.Unchanged;
        }

        public void SetModified<TEntity>(TEntity item) where TEntity : class
        {
            base.Entry<TEntity>(item).State = EntityState.Modified;
        }

        public void ApplyCurrentValues<TEntity>(TEntity original, TEntity current) where TEntity : class
        {
            base.Entry<TEntity>(original).CurrentValues.SetValues(current);

            //base.Entry(original).CurrentValues.SetValues(current);
        }

        public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
        {
            return base.Database.SqlQuery<TEntity>(sqlQuery, parameters);
        }

        public int ExecuteCommand(string sqlCommand, params object[] parameters)
        {
            return base.Database.ExecuteSqlCommand(sqlCommand, parameters);
        }

    }
}